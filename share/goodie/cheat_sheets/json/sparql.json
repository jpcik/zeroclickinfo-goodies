{
    "id": "sparql_cheat_sheet",
    "name": "Sparql",
    "description": "SPARQL protocol and RDF query language",

    "metadata": {
        "sourceName": "displayed at the bottom of the AnswerBar; optional",
        "sourceUrl" : "https://url.to.the.source"
    },

    "aliases": [
        "rdf query", "linked data query"
    ],

    "template_type": "terminal",

    "section_order": [
        "Overview-no",
        "Query forms",
        "Graph patterns",
        "Filters",
        "Functions",
        "Dataset",
        "Aggregates"   
    ],

    "sections": {
        "Overview": [
            {"key":"PREFIX pref: <http://...>",
             "val":"Associate prefix to IRI"},
            {"key":"FROM ...",
             "val":"Define the dataset "},
            {"key":"SELECT ...",
             "val":"Query forms"},
            {"key":"WHERE \\{...\\}",
             "val":"Query patterns"},
            {"key":"GROUP BY, HAVING, ORDER BY, LIMIT, OFFSET ...",
             "val":"Query modifiers"}
        ],
        "Query forms": [
            {"key": "SELECT ?var1 ?var2 ",
             "val": "Project out variables "},
            {"key": "CONSTRUCT \\{:a :b :c\\}",
             "val": "Construct RDF triples"},
            {"key":"ASK",
             "val":"Ask (boolean) if there are matches"},
            {"key":"DESCRIBE ?var",
             "val":"Describe in RDF the matched variables"}
        ],
        "Graph patterns": [
            {"key": ":s :p :o",
             "val": "Triple pattern"},
            {"key": ":s1 :p1 :o1 .\n:s2 :p2 :o2 ",
             "val": "Basic graph pattern: conjunction"},
            {"key": ":s1 :p1 :o1 \nOPTIONAL \\{:s2 :p2 :o2\\} ",
             "val": "Optional graph pattern"},
            {"key": "\\{:s1 :p1 :o1\\} \nUNION \\{:s2 :p2 :o2\\} ",
             "val": "Disjunction graph pattern"},
            {"key": "\\{:s1 :p1 :o1\\} \nMINUS \\{:s2 :p2 :o2\\} ",
             "val": "Susbstract graph pattern"}
        ],
        "Filters": [
            {"key": "FILTER ( ...expression )",
             "val": "Filter pattern"},
            {"key": "=, !=, <, >, <=, >=",
             "val": "Comparison filter"},
            {"key": "!, &&, ||",
             "val": "Logical filter"}
        ],
        "Functions": [
            {"key": "BOUND (?var)",
             "val": "true if bound to a value"},
            {"key": "IF (?x=2,\"yes\",\"no\")",
             "val": "if condition is true, return ast expression, 2nd otherwise"},
            {"key": "NOT EXISTS \\{ pattern \\}",
             "val": "return false if pattern matches"},
            {"key": "EXISTS \\{ pattern \\}",
             "val": "return true if pattern matches"},
            {"key": "rdfTerm (NOT) IN \\{ expression, ... \\}",
             "val": "return true if pattern matches"},            
            {"key": "isIRI(?var)",
             "val": "true if term is an IRI"},            
            {"key": "isBlank(?var)",
             "val": "true if is blank node"},            
            {"key": "isLiteral(?var)",
             "val": "true is a literal"},            
            {"key": "regex(?var, \"^SPARQL\")",
             "val": "true if matches regex"},            
            {"key": "EXISTS \\{ pattern \\}",
             "val": "return true if pattern matches"},            
            {"key": "EXISTS \\{ pattern \\}",
             "val": "return true if pattern matches"},            
            {"key": "EXISTS \\{ pattern \\}",
             "val": "return true if pattern matches"},            
            {"key": "EXISTS \\{ pattern \\}",
             "val": "return true if pattern matches"} 
        ],
        "Dataset": [
            {"key": "FROM < Graph IRI >",
             "val": "Default graph"},
            {"key": "FROM NAMED < Graph IRI >",
             "val": "Named graph"},
            {"key": "FROM < Graph IRI >",
             "val": "Default graph"},
            {"key": "GRAPH ?var \\{ graph pattern \\}",
             "val": "Access graph name"},
            {"key": "GRAPH < graph IRI > \\{ graph pattern \\}",
             "val": "Restrict by graph IRI"}
        ],
        "Aggregates": [
            {"key": "GROUP BY ?var",
             "val": "group by expression"},
            {"key": "HAVING (  expression )",
             "val": "filter over grouped sets"},
            {"key": "SELECT (AVG(?var) as ?avg)",
             "val": "aggregate projections"},
            {"key": "COUNT, SUM, MIN, MAX, AVG, GROUP_CONCAT ",
             "val": "aggregate functions"}
            
        ]
    }
}
